name: Terraform Deploy

on:
  push:
    branches: [main]

jobs:
  terraform:
    runs-on: ubuntu-latest


    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Autenticar na AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Criar terraform.tfvars dinamicamente
        run: |
          cat <<EOF > terraform.tfvars
          aws_region        = "us-east-1"
          regionDefault     = "us-east-1"
          cluster_name      = "fastfood-app-eks"
          cluster_version   = "1.32"
          projectName       = "fastfood-app-eks"
          nodeGroup         = "fastfood-node"
          role              = "arn:aws:iam::361598269712:role/RootRole"
          instanceType      = "t3.small"
          s3_bucket_name    = "terraform-pipeline-bucket-361598269712"
          EOF

      - name: üîÅ Cleanup para garantir m√≥dulos atualizados
        run: rm -rf .terraform .terraform.lock.hcl

      - name: Inicializar Terraform (estado local)
        run: terraform init -upgrade

      - name: Aplicar apenas o bucket S3 (ignorar erro se j√° existir)
        run: |
          terraform apply -auto-approve -target=aws_s3_bucket.terraform_state || echo "Bucket j√° existe, seguindo..."

      - name: Configurar backend S3 dinamicamente
        run: |
          cat <<EOF > backend.tf
          terraform {
            backend "s3" {
              bucket = "terraform-pipeline-bucket-361598269712"
              key    = "infra/terraform.tfstate"
              region = "us-east-1"
              encrypt = true
            }
          }
          EOF

      - name: üßπ For√ßar remo√ß√£o de m√≥dulos antigos
        run: |
          rm -rf .terraform/modules
          rm -rf .terraform/modules/modules.json
          find .terraform -type d -name "*eks*" -exec rm -rf {} +

      - name: Re-inicializar Terraform com backend remoto
        run: terraform init -upgrade -migrate-state -force-copy

      - name: üîÑ For√ßar atualiza√ß√£o dos m√≥dulos
        run: terraform get -update=true

      - name: Validar Terraform
        run: terraform validate

      - name: Verificar e importar recursos se j√° existirem
        run: |
          set -e
          echo "üîÅ Importando recursos existentes no AWS..."
          
          ### 1. S3 Bucket
          if aws s3api head-bucket --bucket terraform-pipeline-bucket-361598269712 2>/dev/null; then
            if ! terraform state list | grep -q 'module.infra.aws_s3_bucket.terraform_state'; then
              terraform import module.infra.aws_s3_bucket.terraform_state terraform-pipeline-bucket-361598269712 || true
            else
              echo "‚úÖ Bucket j√° est√° no state. Ignorando import."
            fi
          fi
          
          ### 2. KMS Alias
          ALIAS="alias/eks/fastfood-app-eks"
          ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
          ALIAS_ARN="arn:aws:kms:us-east-1:$ACCOUNT_ID:$ALIAS"
          if aws kms list-aliases --region us-east-1 \
            --query "Aliases[?AliasName=='$ALIAS'] | length(@)" | grep -q 1; then
            if ! terraform state list | grep -q 'module.infra.module.eks.module.kms.aws_kms_alias.this\["cluster"\]'; then
              terraform import 'module.infra.module.eks.module.kms.aws_kms_alias.this["cluster"]' "$ALIAS_ARN" || true
            else
              echo "‚úÖ Alias j√° est√° no state. Ignorando import."
            fi
          fi
          
          ### 3. ECR Repository
          if aws ecr describe-repositories --repository-names tech-challenge-fastfood --region us-east-1 >/dev/null 2>&1; then
            if ! terraform state list | grep -q 'module.infra.aws_ecr_repository.fastfood'; then
              terraform import module.infra.aws_ecr_repository.fastfood tech-challenge-fastfood || true
            else
              echo "‚úÖ ECR j√° est√° no state. Ignorando import."
            fi
          fi
          
          ### 4. Secrets Manager
          if aws secretsmanager describe-secret --secret-id cognito/app-client-secret --region us-east-1 >/dev/null 2>&1; then
            if ! terraform state list | grep -q 'module.infra.aws_secretsmanager_secret.cognito_secret'; then
              terraform import module.infra.aws_secretsmanager_secret.cognito_secret cognito/app-client-secret || true
            else
              echo "‚úÖ Secret j√° est√° no state. Ignorando import."
            fi
          fi
          
          echo "‚úÖ Fim da verifica√ß√£o de importa√ß√µes."


      - name: Plano de execu√ß√£o
        run: terraform plan -var-file="terraform.tfvars"

      - name: Aplicar infraestrutura
        run: terraform apply -auto-approve -var-file="terraform.tfvars"
